package com.sun.algo.algo

/**
  * Created by bjsunyutao on 2018/3/12.
  * Reverse Polish Notation
  * 逆波兰表达式
  * 算法：
  * 一、 将中缀表达式转换成后缀表达式算法：
  * 1、从左至右扫描一中缀表达式。
  * 2、若读取的是操作数，则判断该操作数的类型，并将该操作数存入操作数堆栈
  * 3、若读取的是运算符
  *   (1) 该运算符为左括号"("，则直接存入运算符堆栈。
  *   (2) 该运算符为右括号")"，则输出运算符堆栈中的运算符到操作数堆栈，直到遇到左括号为止。
  *   (3) 该运算符为非括号运算符：
  *     (a) 若运算符堆栈栈顶的运算符为括号，则直接存入运算符堆栈。
  *     (b) 若比运算符堆栈栈顶的运算符优先级高或相等，则直接存入运算符堆栈。
  *     (c) 若比运算符堆栈栈顶的运算符优先级低，则输出栈顶运算符到操作数堆栈，并将当前运算符压入运算符堆栈。
  * 4、当表达式读取完成后运算符堆栈中尚有运算符时，则依序取出运算符到操作数堆栈，直到运算符堆栈为空。
  *
  * 二、逆波兰表达式求值算法：
  * 1、循环扫描语法单元的项目。
  * 2、如果扫描的项目是操作数，则将其压入操作数堆栈，并扫描下一个项目。
  * 3、如果扫描的项目是一个二元运算符，则对栈的顶上两个操作数执行该运算。
  * 4、如果扫描的项目是一个一元运算符，则对栈的最顶上操作数执行该运算。
  * 5、将运算结果重新压入堆栈。
  * 6、重复步骤2-5，堆栈中即为结果值。
  *
  * eg: 1 * ((2+3)*3) =>  1 2 3 + 3 * *
  */
object RpnExpression {
  def main(args: Array[String]): Unit = {

  }
}
